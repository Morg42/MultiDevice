%YAML 1.1
---
# vim: expandtab:ts=4:sw=4
radio_dependencies:
    name: "Dependency Feature for Radio"
    remark: "Only works with respective user function. Put multidevice_uf.py in folder functions."
    tunerpreset:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...zone1.power == True', ['...zone1.source == "net"', '...zone1.source == "iradio"', '...zone1.source == "tuner"']]

    tunerpresetup:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...zone1.power == True', ['...zone1.source == "net"', '...zone1.source == "iradio"', '...zone1.source == "tuner"']]

    tunerpresetdown:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...zone1.power == True', ['...zone1.source == "net"', '...zone1.source == "iradio"', '...zone1.source == "tuner"']]

radio:
    title:
        type: str
        md_deviceid: DEVICENAME
        md_command: radio/title
        md_read: true

    genre:
        type: str
        md_deviceid: DEVICENAME
        md_command: radio/genre
        md_read: true

    station:
        type: str
        md_deviceid: DEVICENAME
        md_command: radio/station
        md_read: true

    tunerpreset:
        type: str
        md_deviceid: DEVICENAME
        md_command: radio/tunerpreset
        md_read: true
        md_read_initial: true
        md_write: true

    tunerpresetup:
        type: bool
        enforce_updates: yes
        md_deviceid: DEVICENAME
        md_command: radio/tunerpresetup
        md_write: true

    tunerpresetdown:
        type: bool
        enforce_updates: yes
        md_deviceid: DEVICENAME
        md_command: radio/tunerpresetdown
        md_write: true

general:
    error:
        type: str
        md_deviceid: DEVICENAME
        md_command: general/error
        md_read: true

        lookup:
            type: dict
            md_deviceid: DEVICENAME
            md_lookup: ERROR
    display:
        type: str
        md_deviceid: DEVICENAME
        md_command: general/display
        md_read: true
        md_read_initial: true

zone1_dependencies:
    name: "Dependency Feature for Zone 1"
    remark: "Only works with respective user function. Put multidevice_uf.py in folder functions."
    source:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...power == True']
    sleep:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...power == True']
    standby:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...power == True']
    volume:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...power == True']
    mute:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...power == True']
    settings:
        sound:
            tone:
                eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

                dependencies:
                    type: list
                    cache: True
                    initial_value: ['.....power == True']
            treble:
                eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

                dependencies:
                    type: list
                    cache: True
                    initial_value: ['...tone == True']
            bass:
                eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

                dependencies:
                    type: list
                    cache: True
                    initial_value: ['...tone == True']
            speakers:
                eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

                dependencies:
                    type: list
                    cache: True
                    initial_value: ['.....power == True']
zone1:
    read:
        type: bool
        md_deviceid: DEVICENAME
        md_read_group_trigger: 1
        enforce_updates: true
    power:
        type: bool
        md_deviceid: DEVICENAME
        md_command: zone1/power
        md_read: true
        md_read_initial: true
        md_write: true
        md_read_group: 1
        on_change:
          - sh...read.timer(sh..readdelay(), True) if value is True else None
          - sh...settings.sound.read.timer(sh..readdelay(), True) if value is True else None
          - sh...settings.sound.channel_level.read.timer(sh..readdelay(), True) if value is True else None

        readdelay:
            type: num
            initial_value: 1
    mute:
        type: bool
        md_deviceid: DEVICENAME
        md_command: zone1/mute
        md_read: true
        md_read_initial: true
        md_write: true
        md_read_group: 1
    volume:
        type: num
        md_deviceid: DEVICENAME
        md_command: zone1/volume
        md_read: true
        md_read_initial: true
        md_write: true
        md_read_group: 1
    volumeup:
        type: bool
        enforce_updates: yes
        md_deviceid: DEVICENAME
        md_command: zone1/volumeup
        md_write: true
    volumedown:
        type: bool
        enforce_updates: yes
        md_deviceid: DEVICENAME
        md_command: zone1/volumedown
        md_write: true
    source:
        type: str
        md_deviceid: DEVICENAME
        md_command: zone1/source
        md_read: true
        md_read_initial: true
        md_write: true
        md_read_group: 1

        lookup:
            type: dict
            md_deviceid: DEVICENAME
            md_lookup: SOURCE
    sourceup:
        type: bool
        enforce_updates: yes
        md_deviceid: DEVICENAME
        md_command: zone1/sourceup
        md_write: true
    sourcedown:
        type: bool
        enforce_updates: yes
        md_deviceid: DEVICENAME
        md_command: zone1/sourcedown
        md_write: true

    settings:
        sound:
            channel_level:
                read:
                    type: bool
                    md_deviceid: DEVICENAME
                    md_read_group_trigger: 5
                    enforce_updates: true
                front_left:
                    type: num
                    md_deviceid: DEVICENAME
                    md_command: zone1/level_front_left
                    md_read: true
                    md_write: true
                    md_read_group: 5
                front_right:
                    type: num
                    md_deviceid: DEVICENAME
                    md_command: zone1/level_front_right
                    md_read: true
                    md_write: true
                    md_read_group: 5
                front_center:
                    type: num
                    md_deviceid: DEVICENAME
                    md_command: zone1/level_front_center
                    md_read: true
                    md_write: true
                    md_read_group: 5
                surround_left:
                    type: num
                    md_deviceid: DEVICENAME
                    md_command: zone1/level_surround_left
                    md_read: true
                    md_write: true
                    md_read_group: 5
                surround_right:
                    type: num
                    md_deviceid: DEVICENAME
                    md_command: zone1/level_surround_right
                    md_read: true
                    md_write: true
                    md_read_group: 5
                subwoofer:
                    type: num
                    md_deviceid: DEVICENAME
                    md_command: zone1/level_subwoofer
                    md_read: true
                    md_write: true
                    md_read_group: 5
            read:
                type: bool
                md_deviceid: DEVICENAME
                md_read_group_trigger: 3
                enforce_updates: true
                on_update:
                  - ..tone_read = True
                  - ..channel_level.read = True
            playingmode:
                type: str
                md_deviceid: DEVICENAME
                md_command: zone1/playingmode
                md_read: true
                md_read_initial: true

                lookup:
                    type: dict
                    md_deviceid: DEVICENAME
                    md_lookup: PLAYINGMODE
            listeningmode:
                type: str
                md_deviceid: DEVICENAME
                md_command: zone1/listeningmode
                md_read: true
                md_read_initial: true
                md_write: true
                md_read_group: 3

                lookup:
                    type: dict
                    md_deviceid: DEVICENAME
                    md_lookup: LISTENINGMODE
            speakers:
                type: num
                md_deviceid: DEVICENAME
                md_command: zone1/speakers
                md_read: true
                md_read_initial: true
                md_write: true
                md_read_group: 3
                on_change:
                  - ..speakera = True if value in [1, 3] else False
                  - ..speakerb = True if value in [2, 3] else False
            speakera:
                type: bool
                on_change: ..speakers = None if sh..self.property.last_trigger_by.startswith("On_Change") else sh...speakers() - 1 if value is False else sh...speakers() + 1
            speakerb:
                type: bool
                on_change: ..speakers = None if sh..self.property.last_trigger_by.startswith("On_Change") else sh...speakers() - 2 if value is False else sh...speakers() + 2
            hdmiout:
                type: str
                md_deviceid: DEVICENAME
                md_command: zone1/hdmiout
                md_read: true
                md_read_initial: true
                md_write: true
                md_read_group: 3

                lookup:
                    type: dict
                    md_deviceid: DEVICENAME
                    md_lookup: HDMIOUT
            dialog:
                type: num
                md_deviceid: DEVICENAME
                md_command: zone1/dialog
                md_read: true
                md_read_initial: true
                md_write: true
                md_read_group: 3
            dialogup:
                type: bool
                enforce_updates: yes
                md_deviceid: DEVICENAME
                md_command: zone1/dialogup
                md_write: true
            dialogdown:
                type: bool
                enforce_updates: yes
                md_deviceid: DEVICENAME
                md_command: zone1/dialogdown
                md_write: true
            tone_read:
                type: bool
                md_deviceid: DEVICENAME
                md_read_group_trigger: 4
                enforce_updates: true
            tone:
                type: bool
                md_deviceid: DEVICENAME
                md_command: zone1/tone
                md_read: true
                md_read_initial: true
                md_write: true
                md_read_group: 4
                on_change: ..tone_read = True if value is True else None

                lookup:
                    type: dict
                    md_deviceid: DEVICENAME
                    md_lookup: TONE
            treble:
                type: num
                md_deviceid: DEVICENAME
                md_command: zone1/treble
                md_read: true
                md_read_initial: true
                md_write: true
                md_read_group: 4
            trebleup:
                type: bool
                enforce_updates: yes
                md_deviceid: DEVICENAME
                md_command: zone1/trebleup
                md_write: true
            trebledown:
                type: bool
                enforce_updates: yes
                md_deviceid: DEVICENAME
                md_command: zone1/trebledown
                md_write: true
            bass:
                type: num
                md_deviceid: DEVICENAME
                md_command: zone1/bass
                md_read: true
                md_read_initial: true
                md_write: true
                md_read_group: 4
            bassup:
                type: bool
                enforce_updates: yes
                md_deviceid: DEVICENAME
                md_command: zone1/bassup
                md_write: true
            bassdown:
                type: bool
                enforce_updates: yes
                md_deviceid: DEVICENAME
                md_command: zone1/bassdown
                md_write: true

zone2_dependencies:
    name: "Dependency Feature for Zone 2"
    remark: "Only works with respective user function. Put multidevice_uf.py in folder functions."
    source:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...power == True']
    sleep:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...power == True']
    standby:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...power == True']
    volume:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...power == True']
    mute:
        eval: value if sh..self.property.last_trigger_by.startswith(('priv_md', 'Init')) or uf.multidevice_uf.checkdepencies(sh, sh..dependencies) else None

        dependencies:
            type: list
            cache: True
            initial_value: ['...power == True']

zone2:
    read:
        type: bool
        md_deviceid: DEVICENAME
        md_read_group_trigger: 2
        enforce_updates: true
    power:
        type: bool
        md_deviceid: DEVICENAME
        md_command: zone2/power
        md_read: true
        md_read_initial: true
        md_write: true
        on_change: sh...read.timer(sh..readdelay(), True) if value is True else None

        readdelay:
            type: num
            initial_value: 1
    mute:
        type: bool
        md_deviceid: DEVICENAME
        md_command: zone2/mute
        md_read: true
        md_read_initial: true
        md_write: true
        md_read_group: 2
    volume:
        type: num
        md_deviceid: DEVICENAME
        md_command: zone2/volume
        md_read: true
        md_read_initial: true
        md_write: true
        md_read_group: 2
    volumeup:
        type: bool
        enforce_updates: yes
        md_deviceid: DEVICENAME
        md_command: zone2/volumeup
        md_write: true
    volumedown:
        type: bool
        enforce_updates: yes
        md_deviceid: DEVICENAME
        md_command: zone2/volumedown
        md_write: true
    source:
        type: str
        md_deviceid: DEVICENAME
        md_command: zone2/source
        md_read: true
        md_read_initial: true
        md_write: true
        md_read_group: 2
    sourceup:
        type: bool
        enforce_updates: yes
        md_deviceid: DEVICENAME
        md_command: zone2/sourceup
        md_write: true
    sourcedown:
        type: bool
        enforce_updates: yes
        md_deviceid: DEVICENAME
        md_command: zone2/sourcedown
        md_write: true
